#!/usr/bin/python3m

import tkinter as tk
from tkinter import ttk
from tkinter import *
from PIL import Image, ImageTk
import random
import time
import pygame
import threading

count = 0
tot = 0
mean_y_pos = 0
start_time = 0
min_partial = 100000
min_mean = 100000
stop = 0
#soundDir = "\sound\"

def music():
	pygame.init()

	pygame.mixer.music.load("InstantCrush.wav")
	pygame.mixer.music.set_volume(0.05)
	pygame.mixer.music.play()
	time.sleep(1)
	for i in range(5,50):
		pygame.mixer.music.set_volume(i/100)
		time.sleep(0.1)
	
def music_play():
	music_button = Button(image=photo_music) 
	pygame.mixer.music.play()

def music_stop():
	global stop
	if stop == 0:
		pygame.mixer.music.pause()
		music_button.config(image=photo_music_stop)
		stop=1
	else:
		music_button.config(image=photo_music) 
		pygame.mixer.music.unpause() 
		stop=0



def tryagain_func(): 					#-------------------------------------------------------------
	root_1.destroy()
	count = 0
	tot = 0
	mean_y_pos = 0
	min_partial = 100000
	min_mean = 100000	
	first_screen()



def stop_func(): 					#-------------------------------------------------------------
	root.destroy()	
	global root_1
	root_1 = tk.Tk()
	root_1.title("The reaction game")
	global min_partial, min_mean	

	width_screen, height_screen = root_1.winfo_screenwidth(), root_1.winfo_screenheight() #read the dimensions of the screen
	width_root, height_root = int(width_screen/2),int(height_screen/2) #calculate the dimensions of the main window
	root_1.geometry("%dx%d" % (width_root, height_root)) #setup of the window dimensions
	root_1.resizable(width=False, height=False) #block the possibility to resize the dimensions of the window

	# backgroud setup
	image = Image.open("finalscreen.png")
	if image.size != (width_root, height_root):
	    image = image.resize((width_root, height_root), Image.ANTIALIAS)

	image = ImageTk.PhotoImage(image)
	bg_label = tk.Label(root_1, image = image)
	bg_label.place(x=0, y=0, relwidth=1, relheight=1)
	bg_label.image = image

	# text widget setup
	min_partial_text = Text(root_1)
	min_partial_text.place(relx=.32, rely=.3)
	min_partial_text.insert(END, " The best partial time: "+str(min_partial))	
	min_partial_text.config(state="disabled", font="times 15 italic", fg="#efe26e", width=25, height=1, 
			relief=FLAT, bd=0, bg="#007972", highlightbackground="#64f4d2", highlightcolor="#007c74")

	min_mean_text = Text(root_1)
	min_mean_text.place(relx=.32, rely=.4)
	min_mean_text.insert(END, 3*" "+"The best mean time: "+str("{0:.4f}".format(min_mean)))	
	min_mean_text.config(state="disabled", font="times 15 italic", fg="#efe26e", width=25, height=1, 
			relief=FLAT, bd=0, bg="#007972", highlightbackground="#64f4d2", highlightcolor="#007c74")
	
	#Buttons
	### Try again button
	tryagain_DimX = 100
	tryagain_DimY = 100
	image_tryagain = Image.open("tryagain.png")
	image_tryagain = image_tryagain.resize((tryagain_DimX,tryagain_DimY), Image.ANTIALIAS)
	photo_tryagain = ImageTk.PhotoImage(image_tryagain)
	tryagain_button = Button(root_1, image=photo_tryagain, command=tryagain_func)
	tryagain_button.config(width=tryagain_DimX, height=tryagain_DimY, bg="#1bddba", bd=0, relief="raised", 
				highlightbackground="#1bddba", activebackground="#f78ea2")
	tryagain_button.place(relx=.815, rely=.45, x=tryagain_DimX/2, y=-(tryagain_DimY)/2, anchor=NE)

	### Exit button
	exit_DimX = 80
	exit_DimY = 40
	image_exit = Image.open("exit.png")
	image_exit = image_exit.resize((exit_DimX,exit_DimY), Image.ANTIALIAS)
	photo_exit = ImageTk.PhotoImage(image_exit)
	exit_button = Button(root_1, image=photo_exit, command=root_1.destroy) 
	exit_button.config(width=exit_DimX, height=exit_DimY, bg="#64f4d2", bd=0, relief="raised", 
				highlightbackground="#64f4d2", activebackground="#f78ea2")
	exit_button.place(relx=.515, rely=.65, x=exit_DimX/2, y=-(exit_DimY)/2, anchor=NE)

	root_1.mainloop()



def random_time():					#-------------------------------------------------------------
	global start_time

	rand_time=random.randint(1,2)
	time.sleep(rand_time)
	start_time=time.time()   ### da sostituire con l'invio di un segnale al micro
	time_button.config(image=photo_red) # the button change color



def time_func(event=None): 					#-------------------------------------------------------------
	global count, tot, mean, mean_y_pos, end_time, min_partial, min_mean
	
	end_time=time.time()   ### questo valore deve essere letto dal micro
	delay_time=end_time-start_time ### valore misurato con il micro

	time_button.config(image=photo_green) # the button change color	

	# lists of times
	number_lenght=11
	count=count+1
	
	if min_partial>delay_time: # calculate the minimum reactive time of the user
		min_partial=delay_time

	if count==8: # it deletes all the present times
		for i in range(1,8):
			text_user_l = Text(root)
			text_user_l.place(relx=.05, rely=i/11+0.07)
			text_user_l.insert(END, 2*" "+"N"+str(i)+":")	
			text_user_l.config(state="disabled", font="times 15 italic", fg="#efe26e", width=number_lenght, height=1, 
					relief=FLAT, bd=0, bg="#007972", highlightbackground="#64f4d2", highlightcolor="#007c74")
		count=1

	time_n = Text(root)
	time_n.place(relx=.05, rely=count/11+0.07)
	time_n.insert(END, 2*" "+"N"+str(count)+": "+str("{0:.4f}".format(delay_time)))	
	time_n.config(state="disabled", font="times 15 italic", fg="#efe26e", width=number_lenght, height=1, 
			relief=FLAT, bd=0, bg="#007972", highlightbackground="#64f4d2", highlightcolor="#007c74")
	tot=tot+delay_time
	
	#means		
	if count==7:
		mean_y_pos+=1
		mean=0
		mean=tot/count

		if min_mean>mean: # calculate the minimum mean of the reactive time of the user
			min_mean=mean

		mean_n = Text(root)
		mean_n.place(relx=.785, rely=mean_y_pos/11+0.07)
		mean_n.insert(END, 2*" "+"M"+str(mean_y_pos)+": "+str(mean))	
		mean_n.config(state="disabled", font="times 15 italic", fg="#efe26e", width=number_lenght, height=1, 
				relief=FLAT, bd=0, bg="#007972", highlightbackground="#64f4d2", highlightcolor="#007c74")
		tot=0
		if mean_y_pos==7:
			stop_func()
	


def main(event=None):					#-------------------------------------------------------------
	global time_button, music_button
	global photo_green, photo_red, photo_music, photo_music_stop
	global root
	
	user = user_entry.get()
	root_0.destroy()
	root = tk.Tk()
	root.title("The reaction game")

	width_screen, height_screen = root.winfo_screenwidth(), root.winfo_screenheight() #read the dimensions of the screen
	width_root, height_root = int(width_screen/2),int(height_screen/2) #calculate the dimensions of the main window
	root.geometry("%dx%d" % (width_root, height_root)) #setup of the window dimensions
	root.resizable(width=False, height=False) #block the possibility to resize the dimensions of the window

	# backgroud setup
	image = Image.open("rootscreen.png")
	if image.size != (width_root, height_root):
	    image = image.resize((width_root, height_root), Image.ANTIALIAS)

	image = ImageTk.PhotoImage(image)
	bg_label = tk.Label(root, image = image)
	bg_label.place(x=0, y=0, relwidth=1, relheight=1)
	bg_label.image = image
	
	# text widget with the username	
	text_user = Text(root)
	text_user.place(relx=.5, rely=.12, x=-(len(user)+9)*5)
	text_user.insert(END, "Welcome, "+user+"!")
	text_user.config(state="disabled", font="times 15 italic", fg="white", width=len(user)+len("Welcome,!")-len(user)//7, 
			height=1, relief=FLAT, bd=0, bg="#007972", highlightbackground="#007c74", highlightcolor="#007c74")

	# BUTTONS
	### Time button
	time_DimX=140
	time_DimY=140
	image_red = Image.open("time_red_bg.png")
	image_red = image_red.resize((time_DimX,time_DimY), Image.ANTIALIAS)
	photo_red = ImageTk.PhotoImage(image_red)
	image_green = Image.open("time_green_bg.png")
	image_green = image_green.resize((time_DimX,time_DimY), Image.ANTIALIAS)
	photo_green = ImageTk.PhotoImage(image_green)
	time_button = Button(root, image=photo_green, command=time_func)
	time_button.config(width=time_DimX, height=time_DimY, bg="#48cbb2", bd=0, relief="raised", 
				highlightbackground="#48cbb2", activebackground="#f78ea2")
	time_button.place(relx=.5, rely=.4, x=time_DimX/2, y=-(time_DimY)/2, anchor=NE)
	time_button.bind("<Return>", time_func)

	### Start button
	start_DimX=80
	start_DimY=40
	image_start = Image.open("start.png")
	image_start = image_start.resize((start_DimX,start_DimY), Image.ANTIALIAS)
	photo_start = ImageTk.PhotoImage(image_start)
	start_button = Button(root, image=photo_start, command=random_time)
	start_button.config(width=start_DimX, height=start_DimY, bg="#64f4d2", bd=0, relief="raised", 
				highlightbackground="#64f4d2", activebackground="#f78ea2")
	start_button.place(relx=.41, rely=.67, x=start_DimX/2, y=-(start_DimY)/2, anchor=NE)

	### Stop button
	stop_DimX=80
	stop_DimY=40
	image_stop = Image.open("stop.png")
	image_stop = image_stop.resize((stop_DimX,stop_DimY), Image.ANTIALIAS)
	photo_stop = ImageTk.PhotoImage(image_stop)
	stop_button = Button(root, image=photo_stop, command=stop_func) 
	stop_button.config(width=stop_DimX, height=stop_DimY, bg="#64f4d2", bd=0, relief="raised", 
				highlightbackground="#64f4d2", activebackground="#f78ea2")
	stop_button.place(relx=.59, rely=.67, x=stop_DimX/2, y=-(stop_DimY)/2, anchor=NE)

	### Music button
	music_DimX=25
	music_DimY=25
	image_music = Image.open("sound_on.png")
	image_music = image_music.resize((music_DimX,music_DimY), Image.ANTIALIAS)
	photo_music = ImageTk.PhotoImage(image_music)
	image_music_stop = Image.open("sound_off.png")
	image_music_stop = image_music_stop.resize((music_DimX,music_DimY), Image.ANTIALIAS)
	photo_music_stop = ImageTk.PhotoImage(image_music_stop)
	music_button = Button(root, image=photo_music, command=music_stop) 
	music_button.config(width=music_DimX, height=music_DimY, bg="#007972", bd=0, relief="raised", 
				highlightbackground="#007972", activebackground="#007972")
	music_button.place(relx=.945, rely=.09, x=music_DimX/2, y=-(music_DimY)/2, anchor=CENTER)

	root.mainloop()



def first_screen():					#-------------------------------------------------------------
	global user_entry
	global root_0
	
	t=threading.Thread(target=music)
	t.start()
	
	#time.sleep(2)
	root_0 = tk.Tk()
	root_0.title("The reaction game")

	width_screen, height_screen = root_0.winfo_screenwidth(), root_0.winfo_screenheight() #read the dimensions of the screen
	width_root, height_root = int(width_screen/2),int(height_screen/2) #calculate the dimensions of the main window
	root_0.geometry("%dx%d" % (width_root, height_root)) #setup of the window dimensions
	root_0.resizable(width=False, height=False) #block the possibility to resize the dimensions of the window

	# backgroud setup
	image = Image.open("firstscreen.png")
	if image.size != (width_root, height_root):
	    image = image.resize((width_root, height_root), Image.ANTIALIAS)

	image = ImageTk.PhotoImage(image)
	bg_label = tk.Label(root_0, image = image)
	bg_label.place(x=0, y=0, relwidth=1, relheight=1)
	bg_label.image = image
	
	# entry
	user_entry = Entry(root_0)
	user_entry.config(justify="center", font="times 18 italic")
	user_entry.place(relx=.53, rely=.425, x=100, anchor=NE)
	user_entry.bind("<Return>", main)

	# begin_button
	begin_DimX=90
	begin_DimY=45
	image_begin = Image.open("begin.png")
	image_begin = image_begin.resize((begin_DimX, begin_DimY), Image.ANTIALIAS)
	photo_begin = ImageTk.PhotoImage(image_begin)
	begin_button = Button(root_0, image=photo_begin, command=main)
	begin_button.config(width=begin_DimX, height=begin_DimY, bg="#64f4d2", bd=0, relief="raised", 
				highlightbackground="#64f4d2", activebackground="#f78ea2")
	begin_button.place(relx=.51, rely=.65, x=begin_DimX/2, y=-(begin_DimY)/2, anchor=NE)
	
	root_0.mainloop()

first_screen()

